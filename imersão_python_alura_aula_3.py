# -*- coding: utf-8 -*-
"""Imersão Python  Alura - Aula 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b-Qfs2mU_s5uiMcU7pp-gQQQcA5IMgAG
"""

#!pip install plotly_express

import pandas as pd
import plotly_express as px
import numpy as np

#Cria o dataframe df_principal e assumi os dados da seção principal ao importar a planilha
df_principal= pd.read_excel("/content/Imersao_Python_Alura_Tabela_de_acoes.xlsx", sheet_name='Principal')

#Cria o dataframe df_total_acoes e assumi os dados da seção total_acoes ao importar a planilha
df_total_acoes=pd.read_excel("/content/Imersao_Python_Alura_Tabela_de_acoes.xlsx", sheet_name='Total_de_acoes')

#Cria o dataframe df_ticker e assumi os dados da seção ticker ao importar a planilha
df_ticker=pd.read_excel("/content/Imersao_Python_Alura_Tabela_de_acoes.xlsx", sheet_name='Ticker')

##ria o dataframe df_gemini e assumi os dados da seção gemini ao importar a planilha
df_gemini=pd.read_excel("/content/Imersao_Python_Alura_Tabela_de_acoes.xlsx", sheet_name='Gemini')

#Cria uma cópia desvinculado da variável df_principal original, assumindo apenas as colunas escritas
df_principal= df_principal[['Ativo','Data','Último (R$)','Var. Dia (%)']].copy()

#Cria uma cópia desvinculado da variável df_principal original, renomeando as colunas
df_principal= df_principal.rename(columns={'Último (R$)':'Valor_final','Var. Dia (%)':'Var_dia_pct'}).copy()

#Cria uma nova coluna na df_principal, trazendo os valores da divisão da coluna var_dia_pct
df_principal['Var_pct']= df_principal['Var_dia_pct'] / 100

#Cria uma nova coluna na df_principal, trazendo os valores do cálculo entre as colunas valor_final e var_pct
df_principal['Valor_inicial']= df_principal['Valor_final'] / (df_principal['Var_pct'] + 1)

#Cria uma agrupamento na df_principal com a df_total_acoes, fazendo a relação entre chaves iguais e informado qual a origem dos dados a serem inseridos
df_principal= df_principal.merge(df_total_acoes,left_on='Ativo', right_on='Código', how='left')

#Deleta na df_principal a coluna Código
df_principal= df_principal.drop(columns=['Código'])

#Cria uma nova coluna na df_principal, trazendo os valores do cálculo entre as colunas valor_final, valor_inicial e Qtde. Teórica
df_principal['Variacao_rs']= (df_principal['Valor_final'] - df_principal['Valor_inicial']) * df_principal['Qtde. Teórica']

#Formata os valores de notação para valores float
pd.options.display.float_format= '{:.2f}'.format

#Formata a coluna Qtde. Teórica para que os dados sejam do tipo INT
df_principal['Qtde. Teórica']= df_principal['Qtde. Teórica'].astype(int)

#Cria uma cópia desvinculado da variável df_principal original, renomeando a coluna
df_principal= df_principal.rename(columns={'Qtde. Teórica':'Qtd_teorica'}).copy()

#Utilizando a biblioteca numpy usamos a função where que faz comparações e retorna valores específicos com base nos resultados dessas comparações
df_principal['Resultado'] = np.where(df_principal['Variacao_rs'] > 0, 'Subiu', np.where(df_principal['Variacao_rs'] < 0, 'Desceu', 'Estável'))

#Cria uma agrupamento na df_principal com a df_ticker, fazendo a relação entre chaves iguais e informado qual a origem dos dados a serem inseridos
df_principal= df_principal.merge(df_ticker, left_on='Ativo', right_on='Ticker', how='left')

#Deleta na df_principal a coluna ticker
df_principal= df_principal.drop(columns=['Ticker'])

#Cria uma agrupamento na df_principal com a df_gemini, fazendo a relação entre chaves iguais e informado qual a origem dos dados a serem inseridos
df_principal= df_principal.merge(df_gemini, left_on='Nome', right_on='Nome da Empresa', how='left')

#Deleta na df_principal a coluna nome da empresa
df_principal= df_principal.drop(columns=['Nome da Empresa'])

#Cria uma cópia desvinculado da variável df_principal original, renomeando a coluna
df_principal= df_principal.rename(columns={'Idade (anos)':'Idade'}).copy()

#Utilizando a biblioteca numpy usamos a função where que faz comparações e retorna valores específicos com base nos resultados dessas comparações
df_principal['Cat_idade'] = np.where(df_principal['Idade'] > 100, 'Mais de 100', np.where(df_principal['Idade'] < 50, 'Menos de 50', 'Entre 50 e 100'))

#Pega o valor máximo da coluna Variacao_rs
maior= df_principal['Variacao_rs'].max()

#Pega o valor minímo da coluna Variacao_rs
menor= df_principal['Variacao_rs'].min()

#Pega o valor médio da coluna Variacao_rs
media= df_principal['Variacao_rs'].mean()

#Pega o valor médio de todos os que subiram baseado na coluna Resultado pegando os valores na coluna Variacao_rs
media_subiu= df_principal[df_principal['Resultado'] == 'Subiu']['Variacao_rs'].mean()

#Pega o valor médio de todos os que desceram baseado na coluna Resultado pegando os valores na coluna Variacao_rs
media_desceu= df_principal[df_principal['Resultado'] == 'Desceu']['Variacao_rs'].mean()

print(df_principal.head(10))
print(f'Maior\tR$ {maior:,.2f}')
print(f'Menor\tR$ {menor:,.2f}')
print(f'Média\tR$ {media:,.2f}')
print(f'Média de quem subiu\tR$ {media_subiu:,.2f}')
print(f'Média de quem desceu\tR$ {media_desceu:,.2f}')

#Cria um novo dataframe apenas com as ações que subiram
df_principal_subiu= df_principal[df_principal['Resultado'] == 'Subiu']

#Cria um novo dataframe apenas com as ações que desceram
df_principal_desceu= df_principal[df_principal['Resultado'] == 'Desceu']

#Faz uma soma agrupando pela coluna segmento
df_analise_segmento= df_principal_subiu.groupby('Segmento')['Variacao_rs'].sum().reset_index()

#Faz uma soma agrupando pela coluna Resultado
df_analise_saldo= df_principal.groupby('Resultado')['Variacao_rs'].sum().reset_index()

#Cria os Gráficos de barra e pizza
fig_bar= px.bar(df_analise_saldo, x='Resultado', y='Variacao_rs', text_auto='.4s', title='Variação Reais por Resultado')
fig_pie= px.pie(df_analise_segmento, values='Variacao_rs', names='Segmento', title='Variação Reais por Segmento')
fig_bar.show()
fig_pie.show()

